this a text formeted of the real code 

#include <SPI.h>
#include <SD.h>

//Editable variables
int scan_amount = 40;                   
String file="scan_001.txt";             
int z_axis_height = 12; //in cm         
int step_delay = 3000; //in us          
float z_layer_height = 0.5; //in mm     
int lead_screw_rotations_per_cm = 8;    
int steps_per_rotation_for_motor = 200; 
int distance_to_center = 8;             

//I/O
int button = 2;
int limit_switch = 10;
//Turntable driver pins
int dir_r = 7;
int step_r = 8;
int enable_r = 9;
//Z-axis driver pins
int dir_z = 3;
int step_z = 5;
int enable_z = 6;

//Variables
File file_values;           
int scan = 0;               
int scan_changed = 0;       
float distance = 0;         
float angle = 0;            
float x = 0;                
float y = 0;
float z = 0;
int z_loop = 0;             
int r_loop = 0;             
float measured_analog = 0;  
float analog = 0;            
float RADIANS = 0.0;       
int steps_z_height = 0;     
int homed = 0;

void setup() {
  Serial.begin(9600);
  pinMode(A0, INPUT);
  pinMode(limit_switch, INPUT);
  pinMode(button, INPUT);
  analogReference(INTERNAL);  
  SD.begin(4);
  pinMode(dir_z, OUTPUT);
  pinMode(step_z, OUTPUT);
  pinMode(enable_z, OUTPUT);
  pinMode(dir_r, OUTPUT);
  pinMode(step_r, OUTPUT);
  pinMode(enable_r, OUTPUT);
  digitalWrite(enable_z,HIGH);
  digitalWrite(enable_r,HIGH);

  //Calculate variables
  RADIANS = (3.141592 / 180.0) * (360/steps_per_rotation_for_motor);
  steps_z_height = (z_layer_height * steps_per_rotation_for_motor * lead_screw_rotations_per_cm)/10;

  
  while(!digitalRead(limit_switch) && homed == 0)
  {
    digitalWrite(enable_z,LOW);     
    digitalWrite(dir_z,HIGH);       
    digitalWrite(step_z,HIGH);      
    delayMicroseconds(step_delay);
    digitalWrite(step_z,LOW);
    delayMicroseconds(step_delay);
  }
  homed = 1;
}

void loop() {
//Wait till the push button is pressed
if(digitalRead(button))
{
  if(scan == 1 && scan_changed == 0)
  {
    scan=0;
    delay(3000);
    scan_changed=1;
  }
  if(scan == 0 && scan_changed == 0)
  {
    scan=1;
    delay(3000);
    scan_changed=1;
  }
  scan_changed = 0;   
}


//If the scanning proces is ON
if(scan == 1)
{ 
  //We stop when we reach the maximum height
  if(z < z_axis_height)
  {     
    for(int loop_cont = 0 ; loop_cont < steps_per_rotation_for_motor; loop_cont++)
    {
      getDistance();
      digitalWrite(enable_r,LOW);   
      digitalWrite(dir_r,LOW);      
      digitalWrite(step_r,HIGH);    
      delayMicroseconds(step_delay);
      digitalWrite(step_r,LOW);
      delayMicroseconds(step_delay);
      angle = angle + RADIANS;      
      write_to_SD(x,y,z);           
      
      
    }
    angle = 0;  //Reset the angle value for next rotation
    
    
    while(z_loop < steps_z_height) 
    {      
    digitalWrite(enable_z,LOW);     
    digitalWrite(dir_z,LOW);        
    digitalWrite(step_z,HIGH);      
    delayMicroseconds(step_delay);
    digitalWrite(step_z,LOW);
    delayMicroseconds(step_delay);
    z_loop = z_loop+1;              
    }
    z = z + z_layer_height;         
    z_loop = 0;                     

}//end of if z_height  

//We finished the scan, we stop the drivers
else
{
  digitalWrite(enable_z,HIGH);
  digitalWrite(enable_r,HIGH);
}

}//if scan
}//End ov void loop


//Function that gets the distance from sensor
double getDistance()
{
  for (int aa=0; aa < scan_amount; aa++)
  {
    measured_analog= analogRead(A0);
    delay(2);
    analog = analog + measured_analog;    
  }
  distance = analog/scan_amount;        //Get the mean. Divide the scan by the amount of scans. 
  analog=0;//reset the andlog read total value
  measured_analog = 0; //reset the andlog read value
  distance = mapFloat(distance,0.0,1023.0,0.0,3.3); //Convert analog pin reading to voltage
  distance = -5.40274*pow(distance,3)+28.4823*pow(distance,2)-49.7115*distance+31.3444; //From datasheet
  distance = distance_to_center - distance;  //the distance d = distance from sensor to center - measured distance
  y =  (cos(angle) * distance);  
  x =  (sin(angle) * distance);  
     
  
}



//Function that maps the value in a float format
float mapFloat(float fval, float val_in_min, float val_in_max, float val_out_min, float val_out_max)
{
  return (fval - val_in_min) * (val_out_max - val_out_min) / (val_in_max - val_in_min) + val_out_min;
}


//Function that writes the value to the SD card
void write_to_SD(float SDx, float SDy, float SDz)
{
  file_values = SD.open(file, FILE_WRITE);
  if (file_values) 
  {
    file_values.print(x); file_values.print(",");
    file_values.print(y); file_values.print(",");
    file_values.println(z);
    file_values.close(); 
  }  
}